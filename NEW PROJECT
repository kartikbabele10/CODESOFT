import math

board = [" " for _ in range(9)]

def print_board(board):
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print("| " + " | ".join(row) + " |")

def winner(board, player):
    win_conditions = [
        [0,1,2], [3,4,5], [6,7,8], 
        [0,3,6], [1,4,7], [2,5,8],  
        [0,4,8], [2,4,6]           
    ]
    return any(all(board[i] == player for i in combo) for combo in win_conditions)

def is_full(board):
    return " " not in board

def minimax(board, depth, is_maximizing, alpha=-math.inf, beta=math.inf):
    if winner(board, "O"):
        return 1
    elif winner(board, "X"):
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                eval = minimax(board, depth+1, False, alpha, beta)
                board[i] = " "
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                eval = minimax(board, depth+1, True, alpha, beta)
                board[i] = " "
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = -1
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            move_val = minimax(board, 0, False)
            board[i] = " "
            if move_val > best_val:
                best_val = move_val
                move = i
    return move

def play():
    print("Welcome to Tic-Tac-Toe! You are X, AI is O.")
    print_board(board)

    while True:
        
        move = int(input("Enter your move (1-9): ")) - 1
        if board[move] != " ":
            print("Invalid move! Try again.")
            continue
        board[move] = "X"

        if winner(board, "X"):
            print_board(board)
            print("üéâ You win!")
            break
        if is_full(board):
            print_board(board)
            print("ü§ù It's a draw!")
            break

        ai_move = best_move(board)
        board[ai_move] = "O"

        print_board(board)

        if winner(board, "O"):
            print("üíª AI wins!")
            break
        if is_full(board):
            print("ü§ù It's a draw!")
            break

play()
